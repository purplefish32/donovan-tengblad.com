function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import expect from 'expect';
import Color from 'color';
import makeTheme from '../index';

describe('makeTheme', function () {
  it('adds takes a theme of colors and generates selectors', function () {
    var colors = {
      gray: '#2A2A2A',
      red: '#9B1919'
    };
    var theme = makeTheme.apply(undefined, _toConsumableArray(Object.keys(colors)));

    var graySelector = theme.gray;
    expect(graySelector).toBeA('function');
    expect(graySelector.length).toBe(1 // takes one argument (props)

    );var redSelector = theme.red;
    expect(redSelector).toBeA('function');
    expect(redSelector.length).toBe(1 // takes one argument (props)

    );var themeFromProvider = {
      theme: {
        gray: '#2A2A2A',
        red: '#9B1919'
      }
    };

    expect(graySelector(themeFromProvider)).toBe(colors.gray);
    expect(redSelector(themeFromProvider)).toBe(colors.red);

    var lighterGray = graySelector.lighten(0.4);
    var darkerRed = redSelector.darken(0.1);

    expect(lighterGray(themeFromProvider)).toBe(new Color(colors.gray).lighten(0.4).toString());
    expect(darkerRed(themeFromProvider)).toBe(new Color(colors.red).darken(0.1).toString());
  });
});